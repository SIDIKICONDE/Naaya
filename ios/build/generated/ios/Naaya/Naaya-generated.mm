/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "Naaya.h"


@implementation NativeAudioEqualizerModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_setEQEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setEQEnabled", @selector(setEQEnabled:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getEQEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "getEQEnabled", @selector(getEQEnabled), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_setMasterGain(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setMasterGain", @selector(setMasterGain:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getMasterGain(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getMasterGain", @selector(getMasterGain), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_setBandGain(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setBandGain", @selector(setBandGain:gain:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getBandGain(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getBandGain", @selector(getBandGain:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_setPreset(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setPreset", @selector(setPreset:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getCurrentPreset(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, "getCurrentPreset", @selector(getCurrentPreset), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getAvailablePresets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getAvailablePresets", @selector(getAvailablePresets), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_getSpectrumData(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getSpectrumData", @selector(getSpectrumData), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_startSpectrumAnalysis(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "startSpectrumAnalysis", @selector(startSpectrumAnalysis), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_stopSpectrumAnalysis(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "stopSpectrumAnalysis", @selector(stopSpectrumAnalysis), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_beginBatch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "beginBatch", @selector(beginBatch), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_endBatch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "endBatch", @selector(endBatch), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrSetEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "nrSetEnabled", @selector(nrSetEnabled:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrGetEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "nrGetEnabled", @selector(nrGetEnabled), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrSetConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "nrSetConfig", @selector(nrSetConfig:highPassHz:thresholdDb:ratio:floorDb:attackMs:releaseMs:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrGetConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "nrGetConfig", @selector(nrGetConfig), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_safetySetConfig(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "safetySetConfig", @selector(safetySetConfig:dcRemovalEnabled:dcThreshold:limiterEnabled:limiterThresholdDb:softKneeLimiter:kneeWidthDb:feedbackDetectEnabled:feedbackCorrThreshold:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_safetyGetReport(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "safetyGetReport", @selector(safetyGetReport), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "fxSetEnabled", @selector(fxSetEnabled:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxGetEnabled(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "fxGetEnabled", @selector(fxGetEnabled), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetCompressor(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "fxSetCompressor", @selector(fxSetCompressor:ratio:attackMs:releaseMs:makeupDb:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetDelay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "fxSetDelay", @selector(fxSetDelay:feedback:mix:), args, count);
    }

  NativeAudioEqualizerModuleSpecJSI::NativeAudioEqualizerModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["setEQEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_setEQEnabled};
        
        
        methodMap_["getEQEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getEQEnabled};
        
        
        methodMap_["setMasterGain"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_setMasterGain};
        
        
        methodMap_["getMasterGain"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getMasterGain};
        
        
        methodMap_["setBandGain"] = MethodMetadata {2, __hostFunction_NativeAudioEqualizerModuleSpecJSI_setBandGain};
        
        
        methodMap_["getBandGain"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getBandGain};
        
        
        methodMap_["setPreset"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_setPreset};
        
        
        methodMap_["getCurrentPreset"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getCurrentPreset};
        
        
        methodMap_["getAvailablePresets"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getAvailablePresets};
        
        
        methodMap_["getSpectrumData"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_getSpectrumData};
        
        
        methodMap_["startSpectrumAnalysis"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_startSpectrumAnalysis};
        
        
        methodMap_["stopSpectrumAnalysis"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_stopSpectrumAnalysis};
        
        
        methodMap_["beginBatch"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_beginBatch};
        
        
        methodMap_["endBatch"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_endBatch};
        
        
        methodMap_["nrSetEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrSetEnabled};
        
        
        methodMap_["nrGetEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrGetEnabled};
        
        
        methodMap_["nrSetConfig"] = MethodMetadata {7, __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrSetConfig};
        
        
        methodMap_["nrGetConfig"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_nrGetConfig};
        
        
        methodMap_["safetySetConfig"] = MethodMetadata {9, __hostFunction_NativeAudioEqualizerModuleSpecJSI_safetySetConfig};
        
        
        methodMap_["safetyGetReport"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_safetyGetReport};
        
        
        methodMap_["fxSetEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetEnabled};
        
        
        methodMap_["fxGetEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxGetEnabled};
        
        
        methodMap_["fxSetCompressor"] = MethodMetadata {5, __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetCompressor};
        
        
        methodMap_["fxSetDelay"] = MethodMetadata {3, __hostFunction_NativeAudioEqualizerModuleSpecJSI_fxSetDelay};
        
  }
} // namespace facebook::react

@implementation NativeCameraFiltersModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeCameraFiltersModule_AdvancedFilterParams)
+ (RCTManagedPointer *)JS_NativeCameraFiltersModule_AdvancedFilterParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeCameraFiltersModule::AdvancedFilterParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCameraFiltersModuleSpecJSI_getAvailableFilters(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getAvailableFilters", @selector(getAvailableFilters), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraFiltersModuleSpecJSI_setFilter(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setFilter", @selector(setFilter:intensity:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraFiltersModuleSpecJSI_getFilter(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getFilter", @selector(getFilter), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraFiltersModuleSpecJSI_clearFilter(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "clearFilter", @selector(clearFilter), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraFiltersModuleSpecJSI_setFilterWithParams(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setFilterWithParams", @selector(setFilterWithParams:intensity:params:), args, count);
    }

  NativeCameraFiltersModuleSpecJSI::NativeCameraFiltersModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["getAvailableFilters"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleSpecJSI_getAvailableFilters};
        
        
        methodMap_["setFilter"] = MethodMetadata {2, __hostFunction_NativeCameraFiltersModuleSpecJSI_setFilter};
        
        
        methodMap_["getFilter"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleSpecJSI_getFilter};
        
        
        methodMap_["clearFilter"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleSpecJSI_clearFilter};
        
        
        methodMap_["setFilterWithParams"] = MethodMetadata {3, __hostFunction_NativeCameraFiltersModuleSpecJSI_setFilterWithParams};
        setMethodArgConversionSelector(@"setFilterWithParams", 2, @"JS_NativeCameraFiltersModule_AdvancedFilterParams:");
  }
} // namespace facebook::react

@implementation NativeCameraModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeCameraModule_PhotoCaptureOptions)
+ (RCTManagedPointer *)JS_NativeCameraModule_PhotoCaptureOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeCameraModule::PhotoCaptureOptions>(json);
}
@end
@implementation RCTCxxConvert (NativeCameraModule_VideoCaptureOptions)
+ (RCTManagedPointer *)JS_NativeCameraModule_VideoCaptureOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeCameraModule::VideoCaptureOptions>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_checkPermissions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "checkPermissions", @selector(checkPermissions), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_requestPermissions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "requestPermissions", @selector(requestPermissions), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getAvailableDevices(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getAvailableDevices", @selector(getAvailableDevices), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getCurrentDevice(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getCurrentDevice", @selector(getCurrentDevice), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_selectDevice(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "selectDevice", @selector(selectDevice:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_switchDevice(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "switchDevice", @selector(switchDevice:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_startCamera(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "startCamera", @selector(startCamera:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_stopCamera(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "stopCamera", @selector(stopCamera), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_isActive(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "isActive", @selector(isActive), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_capturePhoto(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "capturePhoto", @selector(capturePhoto:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_startRecording(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "startRecording", @selector(startRecording:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_stopRecording(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "stopRecording", @selector(stopRecording), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_isRecording(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "isRecording", @selector(isRecording), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getRecordingProgress(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getRecordingProgress", @selector(getRecordingProgress), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_hasFlash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "hasFlash", @selector(hasFlash), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setFlashMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setFlashMode", @selector(setFlashMode:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setTorchMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setTorchMode", @selector(setTorchMode:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getMinZoom(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getMinZoom", @selector(getMinZoom), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getMaxZoom(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getMaxZoom", @selector(getMaxZoom), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setZoom(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setZoom", @selector(setZoom:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, StringKind, "getWhiteBalanceMode", @selector(getWhiteBalanceMode), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceMode(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setWhiteBalanceMode", @selector(setWhiteBalanceMode:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTemperature(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getWhiteBalanceTemperature", @selector(getWhiteBalanceTemperature), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceTemperature(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setWhiteBalanceTemperature", @selector(setWhiteBalanceTemperature:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTint(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, NumberKind, "getWhiteBalanceTint", @selector(getWhiteBalanceTint), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceTint(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setWhiteBalanceTint", @selector(setWhiteBalanceTint:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceGains(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getWhiteBalanceGains", @selector(getWhiteBalanceGains), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceGains(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "setWhiteBalanceGains", @selector(setWhiteBalanceGains:green:blue:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getSupportedWhiteBalanceModes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getSupportedWhiteBalanceModes", @selector(getSupportedWhiteBalanceModes), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTemperatureRange(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getWhiteBalanceTemperatureRange", @selector(getWhiteBalanceTemperatureRange), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getPreviewSize(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getPreviewSize", @selector(getPreviewSize), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraModuleSpecJSI_getSupportedFormats(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ArrayKind, "getSupportedFormats", @selector(getSupportedFormats:), args, count);
    }

  NativeCameraModuleSpecJSI::NativeCameraModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["checkPermissions"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_checkPermissions};
        
        
        methodMap_["requestPermissions"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_requestPermissions};
        
        
        methodMap_["getAvailableDevices"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getAvailableDevices};
        
        
        methodMap_["getCurrentDevice"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getCurrentDevice};
        
        
        methodMap_["selectDevice"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_selectDevice};
        
        
        methodMap_["switchDevice"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_switchDevice};
        
        
        methodMap_["startCamera"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_startCamera};
        
        
        methodMap_["stopCamera"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_stopCamera};
        
        
        methodMap_["isActive"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_isActive};
        
        
        methodMap_["capturePhoto"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_capturePhoto};
        setMethodArgConversionSelector(@"capturePhoto", 0, @"JS_NativeCameraModule_PhotoCaptureOptions:");
        
        methodMap_["startRecording"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_startRecording};
        setMethodArgConversionSelector(@"startRecording", 0, @"JS_NativeCameraModule_VideoCaptureOptions:");
        
        methodMap_["stopRecording"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_stopRecording};
        
        
        methodMap_["isRecording"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_isRecording};
        
        
        methodMap_["getRecordingProgress"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getRecordingProgress};
        
        
        methodMap_["hasFlash"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_hasFlash};
        
        
        methodMap_["setFlashMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setFlashMode};
        
        
        methodMap_["setTorchMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setTorchMode};
        
        
        methodMap_["getMinZoom"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getMinZoom};
        
        
        methodMap_["getMaxZoom"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getMaxZoom};
        
        
        methodMap_["setZoom"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setZoom};
        
        
        methodMap_["getWhiteBalanceMode"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceMode};
        
        
        methodMap_["setWhiteBalanceMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceMode};
        
        
        methodMap_["getWhiteBalanceTemperature"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTemperature};
        
        
        methodMap_["setWhiteBalanceTemperature"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceTemperature};
        
        
        methodMap_["getWhiteBalanceTint"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTint};
        
        
        methodMap_["setWhiteBalanceTint"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceTint};
        
        
        methodMap_["getWhiteBalanceGains"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceGains};
        
        
        methodMap_["setWhiteBalanceGains"] = MethodMetadata {3, __hostFunction_NativeCameraModuleSpecJSI_setWhiteBalanceGains};
        
        
        methodMap_["getSupportedWhiteBalanceModes"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getSupportedWhiteBalanceModes};
        
        
        methodMap_["getWhiteBalanceTemperatureRange"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getWhiteBalanceTemperatureRange};
        
        
        methodMap_["getPreviewSize"] = MethodMetadata {0, __hostFunction_NativeCameraModuleSpecJSI_getPreviewSize};
        
        
        methodMap_["getSupportedFormats"] = MethodMetadata {1, __hostFunction_NativeCameraModuleSpecJSI_getSupportedFormats};
        
  }
} // namespace facebook::react
