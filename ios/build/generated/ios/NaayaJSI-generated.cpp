/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "NaayaJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setEQEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->setEQEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getEQEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getEQEnabled(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setMasterGain(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->setMasterGain(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getMasterGain(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getMasterGain(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setBandGain(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->setBandGain(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getBandGain(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getBandGain(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setPreset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->setPreset(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getCurrentPreset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getCurrentPreset(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getAvailablePresets(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getAvailablePresets(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getSpectrumData(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->getSpectrumData(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_startSpectrumAnalysis(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->startSpectrumAnalysis(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_stopSpectrumAnalysis(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->stopSpectrumAnalysis(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_beginBatch(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->beginBatch(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_endBatch(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->endBatch(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrSetEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->nrSetEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrGetEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->nrGetEnabled(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrSetConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->nrSetConfig(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber(),
    count <= 5 ? throw jsi::JSError(rt, "Expected argument in position 5 to be passed") : args[5].asNumber(),
    count <= 6 ? throw jsi::JSError(rt, "Expected argument in position 6 to be passed") : args[6].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrGetConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->nrGetConfig(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_safetySetConfig(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->safetySetConfig(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asBool(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asBool(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber(),
    count <= 5 ? throw jsi::JSError(rt, "Expected argument in position 5 to be passed") : args[5].asBool(),
    count <= 6 ? throw jsi::JSError(rt, "Expected argument in position 6 to be passed") : args[6].asNumber(),
    count <= 7 ? throw jsi::JSError(rt, "Expected argument in position 7 to be passed") : args[7].asBool(),
    count <= 8 ? throw jsi::JSError(rt, "Expected argument in position 8 to be passed") : args[8].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_safetyGetReport(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->safetyGetReport(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->fxSetEnabled(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxGetEnabled(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->fxGetEnabled(
    rt
  );
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetCompressor(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->fxSetCompressor(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetDelay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeAudioEqualizerModuleCxxSpecJSI *>(&turboModule)->fxSetDelay(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
  return jsi::Value::undefined();
}

NativeAudioEqualizerModuleCxxSpecJSI::NativeAudioEqualizerModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NativeAudioEqualizerModule", jsInvoker) {
  methodMap_["setEQEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setEQEnabled};
  methodMap_["getEQEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getEQEnabled};
  methodMap_["setMasterGain"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setMasterGain};
  methodMap_["getMasterGain"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getMasterGain};
  methodMap_["setBandGain"] = MethodMetadata {2, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setBandGain};
  methodMap_["getBandGain"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getBandGain};
  methodMap_["setPreset"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_setPreset};
  methodMap_["getCurrentPreset"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getCurrentPreset};
  methodMap_["getAvailablePresets"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getAvailablePresets};
  methodMap_["getSpectrumData"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_getSpectrumData};
  methodMap_["startSpectrumAnalysis"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_startSpectrumAnalysis};
  methodMap_["stopSpectrumAnalysis"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_stopSpectrumAnalysis};
  methodMap_["beginBatch"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_beginBatch};
  methodMap_["endBatch"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_endBatch};
  methodMap_["nrSetEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrSetEnabled};
  methodMap_["nrGetEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrGetEnabled};
  methodMap_["nrSetConfig"] = MethodMetadata {7, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrSetConfig};
  methodMap_["nrGetConfig"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_nrGetConfig};
  methodMap_["safetySetConfig"] = MethodMetadata {9, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_safetySetConfig};
  methodMap_["safetyGetReport"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_safetyGetReport};
  methodMap_["fxSetEnabled"] = MethodMetadata {1, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetEnabled};
  methodMap_["fxGetEnabled"] = MethodMetadata {0, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxGetEnabled};
  methodMap_["fxSetCompressor"] = MethodMetadata {5, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetCompressor};
  methodMap_["fxSetDelay"] = MethodMetadata {3, __hostFunction_NativeAudioEqualizerModuleCxxSpecJSI_fxSetDelay};
}
static jsi::Value __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_getAvailableFilters(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraFiltersModuleCxxSpecJSI *>(&turboModule)->getAvailableFilters(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_setFilter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraFiltersModuleCxxSpecJSI *>(&turboModule)->setFilter(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_getFilter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  auto result = static_cast<NativeCameraFiltersModuleCxxSpecJSI *>(&turboModule)->getFilter(
    rt
  );
  return result ? jsi::Value(std::move(*result)) : jsi::Value::null();
}
static jsi::Value __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_clearFilter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraFiltersModuleCxxSpecJSI *>(&turboModule)->clearFilter(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_setFilterWithParams(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraFiltersModuleCxxSpecJSI *>(&turboModule)->setFilterWithParams(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
}

NativeCameraFiltersModuleCxxSpecJSI::NativeCameraFiltersModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NativeCameraFiltersModule", jsInvoker) {
  methodMap_["getAvailableFilters"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_getAvailableFilters};
  methodMap_["setFilter"] = MethodMetadata {2, __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_setFilter};
  methodMap_["getFilter"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_getFilter};
  methodMap_["clearFilter"] = MethodMetadata {0, __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_clearFilter};
  methodMap_["setFilterWithParams"] = MethodMetadata {3, __hostFunction_NativeCameraFiltersModuleCxxSpecJSI_setFilterWithParams};
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_checkPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->checkPermissions(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_requestPermissions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->requestPermissions(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getAvailableDevices(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getAvailableDevices(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getCurrentDevice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  auto result = static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getCurrentDevice(
    rt
  );
  return result ? jsi::Value(std::move(*result)) : jsi::Value::null();
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_selectDevice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->selectDevice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_switchDevice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->switchDevice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_startCamera(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->startCamera(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_stopCamera(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->stopCamera(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_isActive(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->isActive(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_capturePhoto(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->capturePhoto(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_startRecording(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->startRecording(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_stopRecording(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->stopRecording(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_isRecording(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->isRecording(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getRecordingProgress(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getRecordingProgress(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_hasFlash(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->hasFlash(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setFlashMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setFlashMode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setTorchMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setTorchMode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setTimer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setTimer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getTimer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getTimer(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getMinZoom(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getMinZoom(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getMaxZoom(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getMaxZoom(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setZoom(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setZoom(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getWhiteBalanceMode(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setWhiteBalanceMode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTemperature(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getWhiteBalanceTemperature(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceTemperature(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setWhiteBalanceTemperature(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTint(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getWhiteBalanceTint(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceTint(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setWhiteBalanceTint(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceGains(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getWhiteBalanceGains(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceGains(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->setWhiteBalanceGains(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getSupportedWhiteBalanceModes(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getSupportedWhiteBalanceModes(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTemperatureRange(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getWhiteBalanceTemperatureRange(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getPreviewSize(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getPreviewSize(
    rt
  );
}
static jsi::Value __hostFunction_NativeCameraModuleCxxSpecJSI_getSupportedFormats(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCameraModuleCxxSpecJSI *>(&turboModule)->getSupportedFormats(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}

NativeCameraModuleCxxSpecJSI::NativeCameraModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("NativeCameraModule", jsInvoker) {
  methodMap_["checkPermissions"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_checkPermissions};
  methodMap_["requestPermissions"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_requestPermissions};
  methodMap_["getAvailableDevices"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getAvailableDevices};
  methodMap_["getCurrentDevice"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getCurrentDevice};
  methodMap_["selectDevice"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_selectDevice};
  methodMap_["switchDevice"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_switchDevice};
  methodMap_["startCamera"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_startCamera};
  methodMap_["stopCamera"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_stopCamera};
  methodMap_["isActive"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_isActive};
  methodMap_["capturePhoto"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_capturePhoto};
  methodMap_["startRecording"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_startRecording};
  methodMap_["stopRecording"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_stopRecording};
  methodMap_["isRecording"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_isRecording};
  methodMap_["getRecordingProgress"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getRecordingProgress};
  methodMap_["hasFlash"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_hasFlash};
  methodMap_["setFlashMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setFlashMode};
  methodMap_["setTorchMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setTorchMode};
  methodMap_["setTimer"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setTimer};
  methodMap_["getTimer"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getTimer};
  methodMap_["getMinZoom"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getMinZoom};
  methodMap_["getMaxZoom"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getMaxZoom};
  methodMap_["setZoom"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setZoom};
  methodMap_["getWhiteBalanceMode"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceMode};
  methodMap_["setWhiteBalanceMode"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceMode};
  methodMap_["getWhiteBalanceTemperature"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTemperature};
  methodMap_["setWhiteBalanceTemperature"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceTemperature};
  methodMap_["getWhiteBalanceTint"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTint};
  methodMap_["setWhiteBalanceTint"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceTint};
  methodMap_["getWhiteBalanceGains"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceGains};
  methodMap_["setWhiteBalanceGains"] = MethodMetadata {3, __hostFunction_NativeCameraModuleCxxSpecJSI_setWhiteBalanceGains};
  methodMap_["getSupportedWhiteBalanceModes"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getSupportedWhiteBalanceModes};
  methodMap_["getWhiteBalanceTemperatureRange"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getWhiteBalanceTemperatureRange};
  methodMap_["getPreviewSize"] = MethodMetadata {0, __hostFunction_NativeCameraModuleCxxSpecJSI_getPreviewSize};
  methodMap_["getSupportedFormats"] = MethodMetadata {1, __hostFunction_NativeCameraModuleCxxSpecJSI_getSupportedFormats};
}


} // namespace facebook::react
