/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of Naaya symbols
#ifndef Naaya_H
#define Naaya_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN

@protocol NativeCameraFiltersModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSArray<NSString *> *)getAvailableFilters;
- (NSNumber *)setFilter:(NSString *)name
              intensity:(double)intensity;
- (NSDictionary * _Nullable)getFilter;
- (NSNumber *)clearFilter;

@end

@interface NativeCameraFiltersModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCameraFiltersModule'
   */
  class JSI_EXPORT NativeCameraFiltersModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCameraFiltersModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeCameraModule {
    struct PhotoCaptureOptions {
      std::optional<double> quality() const;
      std::optional<bool> base64() const;
      std::optional<bool> exif() const;
      std::optional<bool> skipMetadata() const;
      NSString *format() const;
      NSString *deviceId() const;

      PhotoCaptureOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraModule_PhotoCaptureOptions)
+ (RCTManagedPointer *)JS_NativeCameraModule_PhotoCaptureOptions:(id)json;
@end
namespace JS {
  namespace NativeCameraModule {
    struct VideoCaptureOptions {
      NSString *quality() const;
      std::optional<double> maxDuration() const;
      std::optional<double> maxFileSize() const;
      std::optional<double> videoBitrate() const;
      std::optional<double> audioBitrate() const;
      std::optional<bool> recordAudio() const;
      NSString *codec() const;
      NSString *deviceId() const;

      VideoCaptureOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeCameraModule_VideoCaptureOptions)
+ (RCTManagedPointer *)JS_NativeCameraModule_VideoCaptureOptions:(id)json;
@end
@protocol NativeCameraModuleSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)checkPermissions;
- (NSDictionary *)requestPermissions;
- (NSArray<NSDictionary *> *)getAvailableDevices;
- (NSDictionary * _Nullable)getCurrentDevice;
- (NSNumber *)selectDevice:(NSString *)deviceId;
- (NSNumber *)switchDevice:(NSString *)position;
- (NSNumber *)startCamera:(NSString *)deviceId;
- (NSNumber *)stopCamera;
- (NSNumber *)isActive;
- (NSDictionary *)capturePhoto:(JS::NativeCameraModule::PhotoCaptureOptions &)options;
- (NSNumber *)startRecording:(JS::NativeCameraModule::VideoCaptureOptions &)options;
- (NSDictionary *)stopRecording;
- (NSNumber *)isRecording;
- (NSDictionary *)getRecordingProgress;
- (NSNumber *)hasFlash;
- (NSNumber *)setFlashMode:(NSString *)mode;
- (NSNumber *)setTorchMode:(BOOL)enabled;
- (NSNumber *)getMinZoom;
- (NSNumber *)getMaxZoom;
- (NSNumber *)setZoom:(double)level;
- (NSDictionary *)getPreviewSize;
- (NSArray<NSDictionary *> *)getSupportedFormats:(NSString *)deviceId;

@end

@interface NativeCameraModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeCameraModule'
   */
  class JSI_EXPORT NativeCameraModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeCameraModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react

inline std::optional<double> JS::NativeCameraModule::PhotoCaptureOptions::quality() const
{
  id const p = _v[@"quality"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeCameraModule::PhotoCaptureOptions::base64() const
{
  id const p = _v[@"base64"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeCameraModule::PhotoCaptureOptions::exif() const
{
  id const p = _v[@"exif"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeCameraModule::PhotoCaptureOptions::skipMetadata() const
{
  id const p = _v[@"skipMetadata"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeCameraModule::PhotoCaptureOptions::format() const
{
  id const p = _v[@"format"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraModule::PhotoCaptureOptions::deviceId() const
{
  id const p = _v[@"deviceId"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraModule::VideoCaptureOptions::quality() const
{
  id const p = _v[@"quality"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeCameraModule::VideoCaptureOptions::maxDuration() const
{
  id const p = _v[@"maxDuration"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeCameraModule::VideoCaptureOptions::maxFileSize() const
{
  id const p = _v[@"maxFileSize"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeCameraModule::VideoCaptureOptions::videoBitrate() const
{
  id const p = _v[@"videoBitrate"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeCameraModule::VideoCaptureOptions::audioBitrate() const
{
  id const p = _v[@"audioBitrate"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<bool> JS::NativeCameraModule::VideoCaptureOptions::recordAudio() const
{
  id const p = _v[@"recordAudio"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeCameraModule::VideoCaptureOptions::codec() const
{
  id const p = _v[@"codec"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeCameraModule::VideoCaptureOptions::deviceId() const
{
  id const p = _v[@"deviceId"];
  return RCTBridgingToOptionalString(p);
}
NS_ASSUME_NONNULL_END
#endif // Naaya_H
